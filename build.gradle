/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.7/samples
 */

buildscript {
    dependencies {
        classpath "org.jbake:jbake-gradle-plugin:5.0.0"
    }
}

plugins {
    id 'java'
    id "org.xbib.gradle.plugin.git" version "2.0.0"
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    jcenter()
}

dependencies {
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'junit:junit:4.13.2' 
}

task reports (dependsOn: ['test', 'javadoc']){
    description 'Ensures "test" and "javadoc" tasks are executed'
    doLast{
        println '"test" and "javadoc" tasks successful'
    }
}

task deployReports (dependsOn: 'reports'){
    description 'Ensures "reports" task is executed, and\n\t\tCopies build/docs and build/reports directories into gh-pages branch'
    doLast{
        mkdir 'docs'
        def thisRepo = rootProject.projectDir.toString()
        def docsDir = "$rootDir/docs"
        project.delete {
            delete docsDir
        }
        def grgit = git.clone {
            dir = docsDir
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }

        println '"reports" task successful'
    }
}

task copyReports (type: Copy, dependsOn: ['bake', 'clonePages']){
    from "$buildDir/jbake"
    into "docs"
}

task commitPages (dependsOn: 'copyReports') {
    group = "Reporting"
    description 'Pushes copies of build/docs and build/reports to docs and reports directories in gh-pages branch'
    doLast{
        def docsDir = "docs"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
        grgit.commit {
            message = "Pushing docs and reports directories"
        }
        grgit.push {}
    }
}

test {
    ignoreFailures = true
    useJUnitPlatform()
}